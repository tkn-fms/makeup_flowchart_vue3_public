{"remainingRequest":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue?vue&type=template&id=039c5b43","dependencies":[{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue","mtime":1663334948628},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/cache-loader/dist/cjs.js","mtime":1661341523860},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/babel-loader/lib/index.js","mtime":1661341524225},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1661341524425},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/cache-loader/dist/cjs.js","mtime":1661341523860},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/index.js","mtime":1661341524220}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPFRvcE1lbnUgLz4KICA8ZGl2IGNsYXNzPSJkbmRmbG93IiBAZHJvcD0ib25Ecm9wIj4KICAgIDxkaXYgY2xhc3M9InNpZGVtZW51Ij4KICAgICAgPEZhY2VJbWFnZSAvPgogICAgICA8Tm9kZVNldHRpbmdzIC8+CiAgICAgIDxOb2RlRmllbGQgLz4KICAgIDwvZGl2PgogICAgPFZ1ZUZsb3cKICAgICAgY2xhc3M9ImJhc2ljZmxvdyIgdi1tb2RlbD0iZWxlbWVudHMiCiAgICAgIDpub2RlLXR5cGVzPSJub2RlVHlwZXMiIDpkZWZhdWx0LXpvb209IjEuNSIgOm1pbi16b29tPSIwLjIiIDptYXgtem9vbT0iNCIKICAgICAgOmZpdC12aWV3LW9uLWluaXQ9InRydWUiIDpzbmFwLXRvLWdyaWQ9InRydWUiIDpjb25uZWN0aW9uLW1vZGU9IkNvbm5lY3Rpb25Nb2RlLkxvb3NlIgogICAgICBAZHJhZ292ZXI9Im9uRHJhZ092ZXIiIEBwYW5lLXJlYWR5PSJvbkxvYWQiIEBzZWxlY3Rpb24tZHJhZz0ic2VsZWN0ZWREcmFnIiBAc2VsZWN0aW9uLWNvbnRleHQtbWVudT0ic2VsZWN0MiIKICAgID4KICAgICAgPEJhY2tncm91bmQgcGF0dGVybi1jb2xvcj0iIzAwMDAwMCIgZ2FwPSI4IiAvPgogICAgICA8TWluaU1hcCAvPgogICAgICA8Q29udHJvbHMgLz4KICAgICAgPGRpdiBjbGFzcz0iY29udHJvbHMiPgogICAgICAgIDxidXR0b24gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMxOTE5NzA7IGNvbG9yOiB3aGl0ZTsiIEBjbGljaz0icmVzZXRUcmFuc2Zvcm0iPnJlc2V0IHRyYW5zZm9ybTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICM4YTJiZTI7IGNvbG9yOiB3aGl0ZTsiIEBjbGljaz0idXBkYXRlUG9zIj51cGRhdGUgcG9zaXRpb25zPC9idXR0b24+CiAgICAgICAgPGJ1dHRvbiBAY2xpY2s9ImxvZ1RvT2JqZWN0Ij5sb2cgdG9PYmplY3Q8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmYWNkOyBjb2xvcjogYmxhY2s7IiBAY2xpY2s9ImNvcHlOb2RlcyI+Y29weSBzZWxlY3RlZCBub2RlczwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idXBkYXRlRWRnZV9fY29udHJvbHMiPgogICAgICAgIDxsYWJlbD5sYWJlbDo8L2xhYmVsPgogICAgICAgIDxpbnB1dCB2LW1vZGVsPSJ1cGRhdGVMYWJlbCIvPgogICAgICAgIDxidXR0b24gQGNsaWNrPSJvbkVkZ2VVcGRhdGUiPuaxuuWumjwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgICAgPCEtLeOCq+OCueOCv+ODoOODjuODvOODieOBruioreWumi0tPgogICAgICA8dGVtcGxhdGUgI25vZGUtTWFrZT0icHJvcHMiPgogICAgICAgIDxNYWtlTm9kZSB2LWJpbmQ9InByb3BzIiAvPgogICAgICA8L3RlbXBsYXRlPgogICAgICA8dGVtcGxhdGUgI25vZGUtQnJhbmNoPSJwcm9wcyI+CiAgICAgICAgPEJyYW5jaE5vZGUgdi1iaW5kPSJwcm9wcyIgLz4KICAgICAgPC90ZW1wbGF0ZT4KICAgIDwvVnVlRmxvdz4KICA8L2Rpdj4K"},{"version":3,"sources":["/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue"],"names":[],"mappings":";EA+ZE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzG,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue","sourceRoot":"","sourcesContent":["<script setup>\nimport { Background, Controls, MiniMap, VueFlow, isNode, isEdge, MarkerType, ConnectionMode, useVueFlow, } from '@braks/vue-flow'\nimport { computed, markRaw, ref, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { initialElements } from '../js/initial-elements.js'\n//カスタムノードの追加\nimport MakeNode from '@/components/MakeNode.vue'\nimport BranchNode from '@/components/BranchNode.vue'\n//子コンポーネントの追加\nimport NodeSettings from '@/components/NodeSettings.vue'\nimport FaceImage from '@/components/FaceImage.vue'\nimport NodeField from '@/components/NodeField.vue'\nimport TopMenu from '@/components/TopMenu.vue'\n\n//初期設定\nconst { onPaneReady, onConnect, onEdgesChange, onNodesChange, addEdges, addNodes, setTransform, toObject, project, } = useVueFlow()\nconst elements = ref(initialElements)\n//const elements2 = reactive(elements) reactive,\nconst nodeTypes = {\n  customMake: markRaw(MakeNode),\n  customBranch: markRaw(BranchNode),\n}\nconst store = useStore()\nvar nodeLists = []\nvar edgeLists = []\nvar edgeSNum = [] //sourceから見たedgeの重複 source:[id]\nvar Skeys = [] //source\nvar makeNodeNum = {0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: []}\n\n//最初に一度ノード・エッジのリストを得る\nonMounted(() => {\n  surveySource()\n  changeAllEdgesType()\n  checkMakeNodes()\n})\n/* ノードとエッジの調査 */\nconst surveySource = () => {\n  //登録済みのエッジの出自関係を探る\n  elements.value.forEach((el) => {\n    if(isNode(el)){\n      nodeLists.push(el) //ノード情報の取得\n    }\n    if (isEdge(el)) {\n      edgeLists.push(el) //エッジ情報の取得\n      Skeys = Object.keys(edgeSNum)\n      var tempsource = el.source\n      if(Skeys.includes(tempsource)){\n        edgeSNum[tempsource].push(el.id)\n      }else{\n        edgeSNum[tempsource] = []\n        edgeSNum[tempsource].push(el.id)\n      }\n    }\n  })\n  Skeys = Object.keys(edgeSNum) //最終ループ分のkeyの更新\n}\nconst changeAllEdgesType = () => {\n  elements.value.forEach((el) => {\n    if (isEdge(el)) {\n      //sourceが同じものが2つ以上あるか\n      var tempS = edgeSNum[el.source]\n      if(tempS.length >= 2){\n        el.type = \"smoothstep\"\n      }else{\n        el.type = \"straight\"\n      }\n    }\n  })\n}\n/* メイクノードの調査 */\nconst changeMakeNodes = (nodeData) => {\n  if(nodeData.type == \"add\"){\n    makeNodeNum[nodeData.imgNum].push(nodeData.id)\n  }else if(nodeData.type == \"remove\"){\n    var lengthNum = makeNodeNum[nodeData.imgNum]\n    for(var n=0; n<lengthNum.length; n++){\n      if(lengthNum[n] == nodeData.id){\n        makeNodeNum[nodeData.imgNum].splice(n, 1)\n      }\n    }\n  }else{\n    return\n  }\n  for(var l=0; l<Object.keys(makeNodeNum).length; l++){\n    var tempLengthNum = makeNodeNum[l]\n    if(tempLengthNum.length >= 1){\n      store.commit(\"setMakeNodeList\", {imgNum:l, imgState: true})\n    }else{\n      store.commit(\"setMakeNodeList\", {imgNum:l, imgState: false})\n    }\n  }\n}\nconst checkMakeNodes = () => {\n  elements.value.forEach((el) => {\n    if (isNode(el) && el.type == \"customMake\") {\n      if(el.data.partNum == 1 && el.data.itemNum == 8){\n        changeMakeNodes({imgNum: 0, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 1 && el.data.itemNum == 8 && el.data.typeNum == 2){\n        changeMakeNodes({imgNum: 1, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 2 && el.dataitemNum == 11){\n        changeMakeNodes({imgNum: 2, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 2 && (13 <= el.data.itemNum && el.data.itemNum <= 16)){\n        changeMakeNodes({imgNum: 3, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 2 && (17 <= el.data.itemNum && el.data.itemNum <= 20)){\n        changeMakeNodes({imgNum: 4, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 4 && el.data.itemNum == 24){\n        changeMakeNodes({imgNum: 5, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 4 && el.data.itemNum == 25){\n        changeMakeNodes({imgNum: 6, id: el.id, type: \"add\"})\n      }else if(el.data.partNum == 0 && el.data.itemNum == 22){\n        changeMakeNodes({imgNum: 7, id: el.id, type: \"add\"})\n      }else{\n        return\n      }\n    }\n  })\n}\n\n/* 起動時の挙動 */\n//onPaneReadyは、viewpaneとノードに表示可能なディメンションがある場合に呼び出されます\nonPaneReady(({fitView}) => {\n  fitView()\n})\nconst onLoad = (flowInstance) => flowInstance.fitView()\n//onNodeDragStop, onNodeDragStop(() => console.log('drag stop'))\nconst onDragOver = (event) => {\n  console.log(event)\n  event.preventDefault()\n  if (event.dataTransfer) {\n    event.dataTransfer.dropEffect = 'move'\n  }\n}\n\n//対象エッジと同じノードから出ているエッジの本数\nconst surveySameSource = (source) => {\n  if(Skeys.includes(source)){\n    var temp2 = edgeSNum[source]\n    return temp2.length\n  }else{\n    return 0\n  }\n}\n\nconst changeEdges = (edge, type) => {\n  var id = edge.id\n  var source = edge.source\n  if(type == \"add\"){\n    edgeLists.push(edge)\n    if(Skeys.includes(source)){\n      edgeSNum[source].push(id)\n    }else{\n      edgeSNum[source] = []\n      edgeSNum[source].push(id)\n    }\n  }else if(type == \"remove\"){\n    for(var i=0; i<edgeLists.length; i++){\n      if(edgeLists[i].id == id){\n        edgeLists.splice(i, 1) //<配列>.splice(<始まりのインデックス>, <削除する要素数>)\n      }\n    }\n    const sameEdgeSNum = edgeSNum[source]\n    if(sameEdgeSNum.length >= 2){\n      for(var j=0; j<sameEdgeSNum.length; j++){\n        if(sameEdgeSNum[j] == id){\n          edgeSNum[source].splice(j, 1)\n        }\n      }\n    }else{\n      delete edgeSNum[source]\n      Skeys = Object.keys(edgeSNum)\n    }\n  }else if(type == \"change\"){\n    console.log(elements.value)\n  }else{\n    return\n  }\n}\n\nonNodesChange((params) => {\n  for(var q=0; q<params.length; q++){\n    if(params[q].type == \"add\"){\n      var nodeitems = params[q].item\n      var nodeData = nodeitems.data\n      //化粧工程の判定\n      if(nodeData.partNum == 1 && nodeData.itemNum == 8){\n        changeMakeNodes({imgNum: 0, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 1 && nodeData.itemNum == 8 && nodeData.typeNum == 2){\n        changeMakeNodes({imgNum: 1, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 2 && nodeData.itemNum == 11){\n        changeMakeNodes({imgNum: 2, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 2 && (13 <= nodeData.itemNum && nodeData.itemNum <= 16)){\n        changeMakeNodes({imgNum: 3, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 2 && (17 <= nodeData.itemNum && nodeData.itemNum <= 20)){\n        changeMakeNodes({imgNum: 4, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 4 && nodeData.itemNum == 24){\n        changeMakeNodes({imgNum: 5, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 4 && nodeData.itemNum == 25){\n        changeMakeNodes({imgNum: 6, id: nodeitems.id, type: \"add\"})\n      }else if(nodeData.partNum == 0 && nodeData.itemNum == 22){\n        changeMakeNodes({imgNum: 7, id: nodeitems.id, type: \"add\"})\n      }else{\n        return\n      }\n    }else if(params[q].type == \"remove\"){\n      elements.value.forEach((el) => {\n        if(isNode(el) && el.id == params[q].id){\n          if(el.data.partNum == 1 && el.data.itemNum == 8){\n            changeMakeNodes({imgNum: 0, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 1 && el.data.itemNum == 8 && el.data.typeNum == 2){\n            changeMakeNodes({imgNum: 1, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 2 && el.data.itemNum == 11){\n            changeMakeNodes({imgNum: 2, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 2 && (13 <= el.data.itemNum && el.data.itemNum <= 16)){\n            changeMakeNodes({imgNum: 3, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 2 && (17 <= el.data.itemNum && el.data.itemNum <= 20)){\n            changeMakeNodes({imgNum: 4, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 4 && el.data.itemNum == 24){\n            changeMakeNodes({imgNum: 5, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 4 && el.data.itemNum == 25){\n            changeMakeNodes({imgNum: 6, id: params[q].id, type: \"remove\"})\n          }else if(el.data.partNum == 0 && el.data.itemNum == 22){\n            changeMakeNodes({imgNum: 7, id: params[q].id, type: \"remove\"})\n          }else{\n            return\n          }\n        }\n      })\n    }else{\n      return\n    }\n  }\n})\n\nonEdgesChange((params) => {\n  var NumOfSameSources\n  for(var i=0; i<params.length; i++){\n    if(params[i].type == \"remove\"){\n      var source\n      var edgeData\n      //消すエッジと同じsourceのエッジが何本あるか調べる\n      for(var j=0; j<edgeLists.length; j++){\n        if (edgeLists[j].id == params[i].id) {\n          edgeData = edgeLists[j]\n          source = edgeLists[j].source\n          NumOfSameSources = surveySameSource(source)\n        }\n      }\n      //エッジが現状で2本以下だったらエッジをstraightに切り替える\n      if(NumOfSameSources == 2){\n        elements.value.forEach((el) => {\n          if (isEdge(el) && el.source == source) {\n            el.type = \"straight\"\n          }\n        })\n        //edgeListの状態変更\n        changeEdges(edgeData, \"change\")\n      }\n      console.log(elements.value)\n    }else if(params[i].type == \"add\"){\n     //追加するエッジと同じsourceのエッジが何本あるか調べる\n     NumOfSameSources = surveySameSource(params[i].item.source)\n     //エッジが現状で1本以上あったらエッジをsmoothstepに切り替える\n     if(NumOfSameSources >= 1){\n       elements.value.forEach((el) => {\n         if (isEdge(el) && el.source == params[i].item.source) {\n           el.type = \"smoothstep\"\n         }\n       })\n     }\n   }else{\n    return\n   }\n  }\n})\n\nonConnect((params) => {\n  console.log(\"エッジの追加\")\n  //これから登録するエッジの出自を取る **ここ変える\n  var NumOfEdge\n  if(Skeys.includes(params.source)){\n    edgeSNum[params.source].push(params.id)\n    NumOfEdge = surveySameSource(params.source) +1\n  }else{\n    edgeSNum[params.source] = []\n    edgeSNum[params.source].push(params.id)\n    NumOfEdge = 1\n  }\n\n  // 新しいエッジの追加\n  var newEdge\n  const getEdgeId = () => `e${params.source}_${params.target}`\n  if(params.source.indexOf('make') > -1){\n    //customMakeだったら\n    newEdge = {\n      id: getEdgeId(),\n      source: params.source,\n      target: params.target,\n      type: NumOfEdge>1 ? 'smoothstep' : 'straight',\n      markerEnd: MarkerType.ArrowClosed,\n      updatable: true,\n      events: {\n        click: (event) => {\n          console.log(event.edge.label)\n        },\n      }\n    }\n  }else if(params.source.indexOf('branch') > -1){\n    //customBranchだったら\n    newEdge = {\n      id: getEdgeId(),\n      source: params.source,\n      target: params.target,\n      label: edgeSNum%2 == 0 ? \"No\" : \"Yes\",\n      style: { stroke: 'red' },\n      labelStyle: { fill: 'white' },\n      labelBgStyle: { fill: edgeSNum%2 == 0 ? 'blue' : 'red' },\n      type: 'smoothstep',\n      markerEnd: MarkerType.ArrowClosed,\n      updatable: true,\n      events: {\n        click: (event) => {\n          console.log(event.edge.label)\n        },\n      }\n    }\n  }else{\n    //input/outputだったら\n    newEdge = {\n      id: getEdgeId(),\n      source: params.source,\n      target: params.target,\n      type: NumOfEdge>1 ? 'smoothstep' : 'straight',\n      markerEnd: MarkerType.ArrowClosed,\n      updatable: true,\n    }\n  }\n  addEdges([newEdge])\n})\n\n/*\n * nodeのプロパティを更新するには、要素のv-modelを使用して要素を直接変更するだけです\n * 要素を上書きする必要なく、変更は常にグラフに反応的に反映される必要があります\n*/\n\n//vueFlow上のボタン操作\n//現在のviewpaneの変換 (ズームとパン) をリセット\nconst resetTransform = () => setTransform({ x: 0, y: 0, zoom: 1 })\n//ノードの位置をランダムに更新\nconst updatePos = () => {\n  elements.value.forEach((el) => {\n    if (isNode(el)) {\n      el.position = {\n        x: Math.random() * 400,\n        y: Math.random() * 400,\n      }\n    }\n  })\n}\n//toObjectは、現在のグラフデータを簡単に永続化できるオブジェクトに変換します\nconst logToObject = () => console.log(toObject())\n//選択したノードをコピーする\nconst copyNodes = () => {\n  console.log(\"選択したもの\")\n}\n\n\nconst updateLabel = computed({\n  get: () => store.state.label,\n  set: (value) => store.commit(\"setLabel\", value)\n})\n\nlet id = 0\nconst ss_getId = () => `ss_${id++}`\nconst m_getId = () => `make_${id++}`\nconst b_getId = () => `branch_${id++}`\nconst onDrop = (event) => {\n  const type = event.dataTransfer?.getData('application/vueflow')\n  const position = project({ x: event.clientX - 400, y: event.clientY - 150 })\n  var newNode\n  if(type == 'input' || type == 'output'){\n    //開始ノードか終了ノード\n    newNode = {\n      id: ss_getId(),\n      type,\n      position,\n      label: type == 'input' ? `メイク開始` : `メイク終了`,\n    }\n  }else{\n    newNode = {\n      id: type == 'customMake' ? m_getId() : b_getId(),\n      type,\n      position,\n      label: store.state.itemName+\"(\"+store.state.typeName+\")\",\n      data: {\n        partName: store.state.partName,\n        partNum: store.state.partNum,\n        itemName: store.state.itemName,\n        itemNum: store.state.itemNum,\n        typeName: store.state.typeName,\n        typeNum: store.state.typeNum,\n      }\n    }\n  }\n  addNodes([newNode])\n}\n\nconst selectedDrag = (params) =>{\n  console.log(params)\n}\nconst select2 = (params) => {\n  console.log(params)\n}\n</script>\n\n<template>\n  <TopMenu />\n  <div class=\"dndflow\" @drop=\"onDrop\">\n    <div class=\"sidemenu\">\n      <FaceImage />\n      <NodeSettings />\n      <NodeField />\n    </div>\n    <VueFlow\n      class=\"basicflow\" v-model=\"elements\"\n      :node-types=\"nodeTypes\" :default-zoom=\"1.5\" :min-zoom=\"0.2\" :max-zoom=\"4\"\n      :fit-view-on-init=\"true\" :snap-to-grid=\"true\" :connection-mode=\"ConnectionMode.Loose\"\n      @dragover=\"onDragOver\" @pane-ready=\"onLoad\" @selection-drag=\"selectedDrag\" @selection-context-menu=\"select2\"\n    >\n      <Background pattern-color=\"#000000\" gap=\"8\" />\n      <MiniMap />\n      <Controls />\n      <div class=\"controls\">\n        <button style=\"background-color: #191970; color: white;\" @click=\"resetTransform\">reset transform</button>\n        <button style=\"background-color: #8a2be2; color: white;\" @click=\"updatePos\">update positions</button>\n        <button @click=\"logToObject\">log toObject</button>\n        <button style=\"background-color: #fffacd; color: black;\" @click=\"copyNodes\">copy selected nodes</button>\n      </div>\n      <div class=\"updateEdge__controls\">\n        <label>label:</label>\n        <input v-model=\"updateLabel\"/>\n        <button @click=\"onEdgeUpdate\">決定</button>\n      </div>\n      <!--カスタムノードの設定-->\n      <template #node-Make=\"props\">\n        <MakeNode v-bind=\"props\" />\n      </template>\n      <template #node-Branch=\"props\">\n        <BranchNode v-bind=\"props\" />\n      </template>\n    </VueFlow>\n  </div>\n</template>\n\n<style>\n@import '../css/flowchart.css';\n</style>"]}]}