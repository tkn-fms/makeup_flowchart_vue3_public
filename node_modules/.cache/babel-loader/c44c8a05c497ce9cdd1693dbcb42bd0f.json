{"remainingRequest":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/babel-loader/lib/index.js!/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue?vue&type=template&id=039c5b43","dependencies":[{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue","mtime":1664098826765},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/babel.config.js","mtime":1661341671887},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/cache-loader/dist/cjs.js","mtime":1663381957340},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/babel-loader/lib/index.js","mtime":1663381957251},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1663381993401},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/cache-loader/dist/cjs.js","mtime":1663381957340},{"path":"/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/node_modules/vue-loader-v16/dist/index.js","mtime":1663381993401}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG5vcm1hbGl6ZVByb3BzIGFzIF9ub3JtYWxpemVQcm9wcywgZ3VhcmRSZWFjdGl2ZVByb3BzIGFzIF9ndWFyZFJlYWN0aXZlUHJvcHMsIHdpdGhNb2RpZmllcnMgYXMgX3dpdGhNb2RpZmllcnMsIHdpdGhDdHggYXMgX3dpdGhDdHgsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogInNpZGVtZW51Igp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKCRzZXR1cFsiVG9wTWVudSJdLCB7CiAgICBvblN1Ym1pdE9iamVjdDogJHNldHVwLmxvZ1RvT2JqZWN0CiAgfSksIF9jcmVhdGVDb21tZW50Vk5vZGUoIiBAY2hlY2tUdXJuMT1cImNoZWNrT3V0cHV0XCIgIiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAiZG5kZmxvdyIsCiAgICBvbkRyb3A6ICRzZXR1cC5vbkRyb3AKICB9LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZSgkc2V0dXBbIkZhY2VJbWFnZSJdKSwgX2NyZWF0ZVZOb2RlKCRzZXR1cFsiTm9kZVNldHRpbmdzIl0pLCBfY3JlYXRlVk5vZGUoJHNldHVwWyJOb2RlRmllbGQiXSldKSwgX2NyZWF0ZVZOb2RlKCRzZXR1cFsiVnVlRmxvdyJdLCB7CiAgICBjbGFzczogImJhc2ljZmxvdyIsCiAgICBtb2RlbFZhbHVlOiAkc2V0dXAuZWxlbWVudHMsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gJGV2ZW50ID0+ICRzZXR1cC5lbGVtZW50cyA9ICRldmVudCksCiAgICAibm9kZS10eXBlcyI6ICRzZXR1cC5ub2RlVHlwZXMsCiAgICAiZGVmYXVsdC16b29tIjogMS41LAogICAgIm1pbi16b29tIjogMC4yLAogICAgIm1heC16b29tIjogNCwKICAgICJmaXQtdmlldy1vbi1pbml0IjogdHJ1ZSwKICAgICJzbmFwLXRvLWdyaWQiOiB0cnVlLAogICAgImNvbm5lY3Rpb24tbW9kZSI6ICRzZXR1cC5Db25uZWN0aW9uTW9kZS5Mb29zZSwKICAgIG9uRHJhZ292ZXI6ICRzZXR1cC5vbkRyYWdPdmVyLAogICAgb25QYW5lUmVhZHk6ICRzZXR1cC5vbkxvYWQsCiAgICBvblNlbGVjdGlvbkNvbnRleHRNZW51OiAkc2V0dXAuc2VsZWN0TWVudSwKICAgIG9uQ29udGV4dG1lbnU6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gX3dpdGhNb2RpZmllcnMoJGV2ZW50ID0+ICRzZXR1cC5oYW5kbGVDbGljaygkZXZlbnQpLCBbInByZXZlbnQiLCAic3RvcCJdKSkKICB9LCB7CiAgICAibm9kZS1NYWtlIjogX3dpdGhDdHgocHJvcHMgPT4gW19jcmVhdGVWTm9kZSgkc2V0dXBbIk1ha2VOb2RlIl0sIF9ub3JtYWxpemVQcm9wcyhfZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKSksIG51bGwsIDE2CiAgICAvKiBGVUxMX1BST1BTICovCiAgICApXSksCiAgICAibm9kZS1Nb3RpdmF0aW9uIjogX3dpdGhDdHgocHJvcHMgPT4gW19jcmVhdGVWTm9kZSgkc2V0dXBbIk1vdGl2YXRpb25Ob2RlIl0sIF9ub3JtYWxpemVQcm9wcyhfZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKSksIG51bGwsIDE2CiAgICAvKiBGVUxMX1BST1BTICovCiAgICApXSksCiAgICAibm9kZS1TZWFzb24iOiBfd2l0aEN0eChwcm9wcyA9PiBbX2NyZWF0ZVZOb2RlKCRzZXR1cFsiU2Vhc29uTm9kZSJdLCBfbm9ybWFsaXplUHJvcHMoX2d1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykpLCBudWxsLCAxNgogICAgLyogRlVMTF9QUk9QUyAqLwogICAgKV0pLAogICAgIm5vZGUtVGltZSI6IF93aXRoQ3R4KHByb3BzID0+IFtfY3JlYXRlVk5vZGUoJHNldHVwWyJUaW1lTm9kZSJdLCBfbm9ybWFsaXplUHJvcHMoX2d1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykpLCBudWxsLCAxNgogICAgLyogRlVMTF9QUk9QUyAqLwogICAgKV0pLAogICAgZGVmYXVsdDogX3dpdGhDdHgoKCkgPT4gW19jcmVhdGVWTm9kZSgkc2V0dXBbIkJhY2tncm91bmQiXSwgewogICAgICAicGF0dGVybi1jb2xvciI6ICIjMDAwMDAwIiwKICAgICAgZ2FwOiAiOCIKICAgIH0pLCBfY3JlYXRlVk5vZGUoJHNldHVwWyJNaW5pTWFwIl0pLCBfY3JlYXRlVk5vZGUoJHNldHVwWyJDb250cm9scyJdKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgICBjbGFzczogImNvbnRyb2xzIgogICAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgICAgc3R5bGU6IHsKICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjMTkxOTcwIiwKICAgICAgICAiY29sb3IiOiAid2hpdGUiCiAgICAgIH0sCiAgICAgIG9uQ2xpY2s6ICRzZXR1cC5yZXNldFRyYW5zCiAgICB9LCAicmVzZXQgdHJhbnNmb3JtIiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgICAgb25DbGljazogJHNldHVwLmxvZ1RvT2JqZWN0CiAgICB9LCAibG9nIHRvT2JqZWN0IildKSwgX2NyZWF0ZVZOb2RlKCRzZXR1cFsiVnVlU2ltcGxlQ29udGV4dE1lbnUiXSwgewogICAgICAiZWxlbWVudC1pZCI6ICJteVVuaXF1ZUlkIiwKICAgICAgb3B0aW9uczogJHNldHVwLm9wdGlvbnMsCiAgICAgIHJlZjogInZ1ZUNvbnRleHRNZW51IiwKICAgICAgb25PcHRpb25DbGlja2VkOiAkc2V0dXAub3B0aW9uQ2xpY2tlZAogICAgfSwgbnVsbCwgNTEyCiAgICAvKiBORUVEX1BBVENIICovCiAgICApXSksCiAgICBfOiAxCiAgICAvKiBTVEFCTEUgKi8KCiAgfSwgOAogIC8qIFBST1BTICovCiAgLCBbIm1vZGVsVmFsdWUiLCAiZGVmYXVsdC16b29tIiwgIm1pbi16b29tIiwgImNvbm5lY3Rpb24tbW9kZSJdKV0sIDMyCiAgLyogSFlEUkFURV9FVkVOVFMgKi8KICApXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9"},{"version":3,"mappings":";;EA0iBSA,KAAK,EAAC;;;6DAFbC,aAAuCC,iBAAvC,EAAuC;IAA7BC,cAAY,EAAED;EAAe,CAAvC,GAAwCE,sDACxCC,oBAyCM,KAzCN,EAyCM;IAzCDL,KAAK,EAAC,SAyCL;IAzCgBM,MAAI,EAAEJ;EAyCtB,CAzCN,GACEG,oBAIM,KAJN,cAIM,CAHJJ,aAAaC,mBAAb,CAGI,EAFJD,aAAgBC,sBAAhB,CAEI,EADJD,aAAaC,mBAAb,CACI,CAJN,GAKAD,aAkCUC,iBAlCV,EAkCU;IAjCRF,KAAK,EAAC,WAiCE;gBAjCmBE,eAiCnB;+DAjCmBA,kBAAQK,OAiC3B;IAhCP,cAAYL,gBAgCL;IAhCiB,gBAAc,GAgC/B;IAhCqC,YAAU,GAgC/C;IAhCqD,YAAU,CAgC/D;IA/BP,oBAAkB,IA+BX;IA/BkB,gBAAc,IA+BhC;IA/BuC,mBAAiBA,sBAAeM,KA+BvE;IA9BPC,UAAQ,EAAEP,iBA8BH;IA9BgBQ,WAAU,EAAER,aA8B5B;IA9BqCS,sBAAsB,EAAET,iBA8B7D;IA7BPU,aAAW,qDAAeV,mBAAYK,MAAZ,CAAf,EAAiC,mBAAjC;EA6BJ,CAlCV;IAea,aAASM,SAAEC,KACpB,IADyB,CACzBb,aAA2BC,kBAA3B,EAA2Ba,oCAATD,KAAS,EAA3B,EAAuB,IAAvB,EAAuB;IAAA;IAAvB,CADyB,CAAP;IAGT,mBAAeD,SAAEC,KAC1B,IAD+B,CAC/Bb,aAAiCC,wBAAjC,EAAiCa,oCAATD,KAAS,EAAjC,EAA6B,IAA7B,EAA6B;IAAA;IAA7B,CAD+B,CAAP;IAGf,eAAWD,SAAEC,KACtB,IAD2B,CAC3Bb,aAA6BC,oBAA7B,EAA6Ba,oCAATD,KAAS,EAA7B,EAAyB,IAAzB,EAAyB;IAAA;IAAzB,CAD2B,CAAP;IAGX,aAASD,SAAEC,KACpB,IADyB,CACzBb,aAA2BC,kBAA3B,EAA2Ba,oCAATD,KAAS,EAA3B,EAAuB,IAAvB,EAAuB;IAAA;IAAvB,CADyB,CAAP;sBAjBpB,MAA8C,CAA9Cb,aAA8CC,oBAA9C,EAA8C;MAAlC,iBAAc,SAAoB;MAAVc,GAAG,EAAC;IAAM,CAA9C,CAA8C,EAC9Cf,aAAWC,iBAAX,CAD8C,EAE9CD,aAAYC,kBAAZ,CAF8C,EAG9CG,oBAGM,KAHN,EAGM;MAHDL,KAAK,EAAC;IAGL,CAHN,EAAqB,CACnBK,oBAAqG,QAArG,EAAqG;MAA7FY,KAAgD,EAAhD;QAAA;QAAA;MAAA,CAA6F;MAA3CC,OAAK,EAAEhB;IAAoC,CAArG,EAA6E,iBAA7E,CADmB,EAEnBG,oBAAkD,QAAlD,EAAkD;MAAzCa,OAAK,EAAEhB;IAAkC,CAAlD,EAA6B,cAA7B,CAFmB,CAArB,CAH8C,EAqB9CD,aAKEC,8BALF,EAKE;MAJA,cAAW,YAIX;MAHCiB,OAAO,EAAEjB,cAGV;MAFAkB,GAAG,EAAC,gBAEJ;MADCC,eAAc,EAAEnB;IACjB,CALF;;IAAA,CArB8C;;;;GAPhD;;EAAA,iEANF;;EAAA","names":["class","_createVNode","$setup","onSubmitObject","_createCommentVNode","_createElementVNode","onDrop","$event","Loose","onDragover","onPaneReady","onSelectionContextMenu","onContextmenu","_withCtx","props","_normalizeProps","gap","style","onClick","options","ref","onOptionClicked"],"sourceRoot":"","sources":["/Users/takanosayaka/Documents/GitHub/makeup_flowchart_vue3/src/views/About.vue"],"sourcesContent":["<script setup>\nimport { Background, Controls, MiniMap, VueFlow, isEdge, MarkerType, ConnectionMode, useVueFlow, } from '@braks/vue-flow'\nimport { markRaw, ref, } from 'vue'\nimport { useStore } from 'vuex'\nimport { testInitialElements } from '../js/initial-elements.js'\n//カスタムノードの追加\nimport MakeNode from '@/components/MakeNode.vue'\nimport MotivationNode from '@/components/MotivationNode.vue'\nimport SeasonNode from '@/components/SeasonNode.vue'\nimport TimeNode from '@/components/TimeNode.vue'\n//子コンポーネントの追加\nimport NodeSettings from '@/components/NodeSettings.vue'\nimport FaceImage from '@/components/FaceImage.vue'\nimport NodeField from '@/components/NodeField.vue'\nimport TopMenu from '@/components/TopMenu.vue'\n//ライブラリの追加\nimport VueSimpleContextMenu from 'vue-simple-context-menu';\nimport 'vue-simple-context-menu/dist/vue-simple-context-menu.css';\nimport axios from \"axios\"\n\n//初期設定\n/* vue-flowの初期設定 */\nconst { onPaneReady, onConnect, onEdgesChange, onNodesChange, addEdges, addNodes, setTransform, toObject, project, getNode, getEdge, } = useVueFlow()\nconst elements = ref(testInitialElements)\nconst nodeTypes = {\n  customMake: markRaw(MakeNode),\n  customMotivation: markRaw(MotivationNode),\n  customSeason: markRaw(SeasonNode),\n  customTime: markRaw(TimeNode),\n}\n/* storeの開始 */\nconst store = useStore()\n/* ノードの管理変数 */\nvar Skeys = [] //source\nvar edgeSNum = [] //sourceから見たedgeの重複 source:[id]\nvar makeNodeNum = {0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: []} //imgNum:[id]\n/* vue-simple-context-menuの初期設定 */\nconst options = [{name: \"Copy\", slug: \"copy\"}]\nconst vueContextMenu = ref(testInitialElements)\n\n\n/* vue-simple-context-menuの関数 */\nconst handleClick =  (event) => {\n  // overwrite readonly properties pageX and pageY and set correct values\n  Object.defineProperty(event, 'pageX', {\n    value: event.pageX - 350,\n    writable: true\n  })\n  Object.defineProperty(event, 'pageY', {\n    value: event.pageY - 100,\n    writable: true\n  })\n  vueContextMenu.value.showMenu(event)\n}\n//コンテキストメニューを呼び出す\nconst selectMenu = (params) => {\n  store.commit(\"setSelectNodeList\", params.nodes)\n}\n//コンテキストメニューのクリック\nconst optionClicked = () => {\n  var copyNode\n  var copyNodesData = store.state.selectnodeList\n  for(var s=0; s<copyNodesData.length; s++){\n    var copyNodeData = store.state.selectnodeList[s]\n    if(copyNodeData.type == 'input' || copyNodeData.type == 'output'){\n      //開始ノードか終了ノード\n      copyNode = {\n        id: ss_getId(),\n        type: copyNodeData.type,\n        position: project({ x: copyNodeData.position.x + 100, y: copyNodeData.position.y + 100 }),\n        label: copyNodeData.label,\n      }\n    }else if(copyNodeData.type == 'customMake'){\n      //メイクノード\n      copyNode = {\n        id: m_getId(),\n        type: copyNodeData.type,\n        position: project({ x: copyNodeData.position.x + 100, y: copyNodeData.position.y + 100 }),\n        label: copyNodeData.label,\n        style: copyNodeData.style,\n        data: copyNodeData.data,\n      }\n    }else{\n      //分岐（ブランチ）ノード\n      copyNode = {\n        id: copyNodeData.type == 'customMotivation'\n          ? mv_getId()\n          : copyNodeData.type == 'customSeason'\n            ? s_getId()\n            : t_getId(),\n        type: copyNodeData.type,\n        position: project({ x: copyNodeData.position.x + 100, y: copyNodeData.position.y + 100 }),\n        label: copyNodeData.label,\n        style: copyNodeData.style,\n      }\n    }\n    addNodes([copyNode])\n  }\n}\n\n/* 起動時の挙動 */\n//onPaneReadyは、viewpaneとノードに表示可能なディメンションがある場合に呼び出されます\nonPaneReady(({fitView}) => {\n  fitView()\n})\nconst onLoad = (flowInstance) => flowInstance.fitView()\n\n/* 対象のノードとエッジの調査 */\n//対象エッジと同じノードから出ているエッジの本数を返す(return)\nconst surveySameSource = (source) => {\n  if(Skeys.includes(source)){\n    var temp2 = edgeSNum[source]\n    return temp2.length\n  }else{\n    return 0\n  }\n}\n//対象エッジの追加/削除に伴うSkeysとedgeSNumの更新\nconst changeEdges = (edge, type) => {\n  //データ受け取り\n  var eid = edge.id\n  var source = edge.source\n  //Skeysの更新\n  Skeys = Object.keys(edgeSNum)\n  if(type == \"add\"){\n    console.log(\"edgeSNumの更新(追加)\")\n    if(Skeys.includes(source)){\n      edgeSNum[source].push(eid)\n    }else{\n      edgeSNum[source] = []\n      edgeSNum[source].push(eid)\n      Skeys = Object.keys(edgeSNum)\n    }\n  }else if(type == \"remove\"){\n    console.log(\"edgeSNumの更新(削除)\")\n    var sameEdgeSNum = edgeSNum[source]\n    if(sameEdgeSNum.length >= 2){\n      for(var j=0; j<sameEdgeSNum.length; j++){\n        if(sameEdgeSNum[j] == eid){\n          edgeSNum[source].splice(j, 1)\n        }\n      }\n    }else{\n      delete edgeSNum[source]\n      Skeys = Object.keys(edgeSNum)\n    }\n  }else if(type == \"change\"){\n    console.log(\"edgeSNumの更新(変更)\")\n  }else{\n    return\n  }\n}\n//対象メイクノードの追加/削除時のmakeNodeNumの値と表示イラストの更新\nconst changeMakeNodes = (nodeData) => {\n  if(nodeData.type == \"add\"){\n    makeNodeNum[nodeData.imgNum].push(nodeData.id)\n  }else if(nodeData.type == \"remove\"){\n    var lengthNum = makeNodeNum[nodeData.imgNum]\n    for(var n=0; n<lengthNum.length; n++){\n      if(lengthNum[n] == nodeData.id){\n        makeNodeNum[nodeData.imgNum].splice(n, 1)\n      }\n    }\n  }else{\n    return\n  }\n\n  //メイクノードの追加/削除に伴う表示イラストの更新\n  for(var l=0; l<Object.keys(makeNodeNum).length; l++){\n    var tempLengthNum = makeNodeNum[l]\n    if(tempLengthNum.length >= 1){\n      store.commit(\"setMakeNodeList\", {imgNum:l, imgState: true})\n    }else{\n      store.commit(\"setMakeNodeList\", {imgNum:l, imgState: false})\n    }\n  }\n}\n//turn2に移る前にメイク終了ノードが設置されているか確認する\n/*\nconst checkOutput = () => {\n  elements.value.forEach((el) => {\n    if (isNode(el)) {\n    }\n  })\n}\n*/\n\n/* ノードの変更時に発火する関数 */\nonNodesChange((params) => {\n  //type: dimensions(配置？/サイズ情報), select, add, remove\n  //params add:[type, item{}] remove:[type, id] select:[type, id, selected]\n  for(var q=0; q<params.length; q++){\n    if(params[q].type == \"add\"){\n      console.log(\"ノードの追加\")\n      //メイクノードだったら\n      if(params[q].item.type == \"customMake\"){\n        var nodeitems = params[q].item\n        var nodeData = nodeitems.data\n        //化粧工程の判定\n        if(nodeData.partNum == 1 && nodeData.itemNum == 8){\n          changeMakeNodes({imgNum: 0, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 1 && nodeData.itemNum == 8 && nodeData.typeNum == 2){\n          changeMakeNodes({imgNum: 1, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 2 && nodeData.itemNum == 11){\n          changeMakeNodes({imgNum: 2, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 2 && (13 <= nodeData.itemNum && nodeData.itemNum <= 16)){\n          changeMakeNodes({imgNum: 3, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 2 && (17 <= nodeData.itemNum && nodeData.itemNum <= 20)){\n          changeMakeNodes({imgNum: 4, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 4 && nodeData.itemNum == 24){\n          changeMakeNodes({imgNum: 5, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 4 && nodeData.itemNum == 25){\n          changeMakeNodes({imgNum: 6, id: nodeitems.id, type: \"add\"})\n        }else if(nodeData.partNum == 0 && nodeData.itemNum == 22){\n          changeMakeNodes({imgNum: 7, id: nodeitems.id, type: \"add\"})\n        }else{\n          return\n        }\n      }\n    }else if(params[q].type == \"remove\"){\n      console.log(\"ノードの削除\")\n      if(params[q].id.indexOf('make') > -1){ //メイクノードだったら\n        const rnode = getNode.value(params[q].id)\n        const rdata = rnode.data\n        if(rdata.partNum == 1 && rdata.itemNum == 8){\n          changeMakeNodes({imgNum: 0, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 1 && rdata.itemNum == 8 && rdata.typeNum == 2){\n          changeMakeNodes({imgNum: 1, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 2 && rdata.itemNum == 11){\n          changeMakeNodes({imgNum: 2, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 2 && (13 <= rdata.itemNum && rdata.itemNum <= 16)){\n          changeMakeNodes({imgNum: 3, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 2 && (17 <= rdata.itemNum && rdata.itemNum <= 20)){\n          changeMakeNodes({imgNum: 4, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 4 && rdata.itemNum == 24){\n          changeMakeNodes({imgNum: 5, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 4 && rdata.itemNum == 25){\n          changeMakeNodes({imgNum: 6, id: params[q].id, type: \"remove\"})\n        }else if(rdata.partNum == 0 && rdata.itemNum == 22){\n          changeMakeNodes({imgNum: 7, id: params[q].id, type: \"remove\"})\n        }else{\n          return\n        }\n      }\n    }else if(params[q].type == \"select\"){\n      var snode\n      if(params[q].id.indexOf('make') > -1 || params[q].id.indexOf('branch') > -1){\n        //メイクノードかブランチノードだったら\n        snode = getNode.value(params[q].id)\n        if(params[q].selected){\n          snode.style['--vf-node-color'] = '#3cb371'\n        }else{\n          snode.style['--vf-node-color'] = 'black'\n        }\n      }\n      if(store.state.turn == 2){\n        if(params[q].id.indexOf('make') > -1){\n          //メイクノードだったら\n          if(params[q].selected){\n            if(!snode.data[\"skip\"]){\n              //skipがfalseだったら\n              snode.style['--vf-node-text'] = '#ff8c00'\n              snode.data[\"skip\"] = true\n            }else{\n              //skipがtrueだったら\n              snode.style['--vf-node-text'] = 'black'\n              snode.data[\"skip\"] = false\n            }\n            console.log(snode)\n          }\n        }\n      }else if(store.state.turn == 3){\n        if(params[q].id.indexOf('make') > -1){\n          //メイクノードだったら\n          if(params[q].selected){\n            if(!snode.data[\"forget\"]){\n              //forgetがfalseだったら\n              snode.style[\"--vf-node-bg\"] = \"pink\"\n              snode.data[\"forget\"] = true\n            }else{\n              //forgetがtrueだったら\n              snode.style[\"--vf-node-bg\"] = \"white\"\n              snode.data[\"forget\"] = false\n            }\n          }\n        }else{\n          alert(\"忘れる化粧工程のメイクノードを選択してください\")\n        }\n      }\n    }\n    else{\n      return\n    }\n  }\n})\n/* エッジの変更時に発火する関数 */\nonEdgesChange((params) => {\n  var NumOfSameSources\n  //params add:[type, item{}]  remove:[type, id]  select:[type, id, selected]\n  for(var i=0; i<params.length; i++){\n    if(params[i].type == \"add\"){\n      var edgeItem = params[i].item\n      //edgeSNumに新しいエッジを追加する\n      Skeys = Object.keys(edgeSNum) //最新版に更新\n      if(Skeys.includes(edgeItem.source)){\n        edgeSNum[edgeItem.source].push(edgeItem.id)\n      }else{\n        edgeSNum[edgeItem.source] = []\n        edgeSNum[edgeItem.source].push(edgeItem.id)\n        Skeys = Object.keys(edgeSNum)\n      }\n      //追加するエッジと同じsourceのエッジが何本あるか調べる\n      NumOfSameSources = surveySameSource(edgeItem.source)\n      //エッジが現状で1本以上あったらエッジをsmoothstepに切り替える\n      if(NumOfSameSources >= 1){\n        elements.value.forEach((el) => {\n          if (isEdge(el) && el.source == edgeItem.source) {\n            el.type = \"smoothstep\"\n          }\n        })\n      }\n    }else if(params[i].type == \"remove\"){\n      var source\n      var edgeData\n      //消すエッジと同じsourceのエッジが何本あるか調べる\n      elements.value.forEach((el) => {\n        if (el.id == params[i].id) {\n          edgeData = el\n          source = el.source\n          NumOfSameSources = surveySameSource(source)\n        }\n      })\n      //エッジが現状で2本以下だったらエッジをstraightに切り替える\n      if(NumOfSameSources == 2){\n        elements.value.forEach((el) => {\n          if (isEdge(el) && el.source == source) {\n            el.type = \"straight\"\n          }\n        })\n      }\n      //edgeListの状態変更\n      changeEdges(edgeData, \"remove\")\n    }else if(params[i].type == \"select\"){\n      var sedge = getEdge.value(params[i].id)\n      if(params[i].selected){\n        sedge.animated = true\n        //turn2だったらラベル設定用にidを保存する\n        if(store.state.turn == 2){\n          store.commit(\"setEdgeId\", params[i].id)\n        }\n      }else{\n        sedge.animated = false\n        //turn2だったらラベル設定用にidを保存する\n        if(store.state.turn == 2){\n          store.commit(\"setEdgeId\", \"\")\n        }\n      }\n    }else{\n      return\n    }\n  }\n})\n/* エッジの追加時に発火する関数 onConnect->onEdgesChange */\nonConnect((params) => {\n  console.log(\"エッジの追加\")\n  //params:[source, sourceHandle, target, targetHandle]\n\n  //同じソースのエッジの本数を取得する\n  var NumOfEdge\n  Skeys = Object.keys(edgeSNum)\n  if(Skeys.includes(params.source)){\n    NumOfEdge = surveySameSource(params.source) +1\n  }else{\n    NumOfEdge = 1\n  }\n\n  //新しいエッジの追加\n  var newEdge\n  const getEdgeId = () => `e${params.source}_${params.target}`\n  if(NumOfEdge < 3){\n    if(params.source.indexOf('make') > -1){\n      //customMakeだったら\n      if(NumOfEdge < 2){\n        newEdge = {\n          id: getEdgeId(),\n          source: params.source,\n          target: params.target,\n          type: 'straight',\n          style: { stroke: 'black' },\n          markerEnd: MarkerType.ArrowClosed,\n          animated: false,\n        }\n      }else{\n        //メイクノードではエッジを1本しか生やせない\n        alert(\"1つの化粧ノードから出せる矢印は1本だけです.追加で分岐させたい場合は分岐ノードを繋げてください\")\n        return\n      }\n    }else if(params.source.indexOf('branch') > -1){\n      //customBranchだったら\n      var addEdgeLabel\n      var addEdgeColor\n      var addEdgeType\n      if(params.source.indexOf('mvbranch') > -1){\n        //やる気ノード\n        addEdgeLabel = NumOfEdge%2 == 0 ? \"なし\" : \"あり\"\n        addEdgeColor = NumOfEdge%2 == 0 ? 'blue' : 'red'\n        addEdgeType = NumOfEdge%2 == 0 ? 'no' : 'max'\n      }else if(params.source.indexOf('sbranch') > -1){\n        //季節ノード\n        addEdgeLabel = NumOfEdge%2 == 0 ? \"冬\" : \"夏\"\n        addEdgeColor = NumOfEdge%2 == 0 ? 'gray' : 'blue'\n        addEdgeType = NumOfEdge%2 == 0 ? 'winter' : 'summer'\n      }else{\n        //時間ノード\n        addEdgeLabel = NumOfEdge%2 == 0 ? \"短い\" : \"長い\"\n        addEdgeColor = NumOfEdge%2 == 0 ? 'blue' : 'red'\n        addEdgeType = NumOfEdge%2 == 0 ? 'short' : 'long'\n      }\n      newEdge = {\n        id: getEdgeId(),\n        source: params.source,\n        target: params.target,\n        type: NumOfEdge>1 ? 'smoothstep' : 'straight',\n        label: addEdgeLabel,\n        style: { stroke: addEdgeColor },\n        labelStyle: { fill: 'white' },\n        labelBgStyle: { fill: addEdgeColor },\n        markerEnd: MarkerType.ArrowClosed,\n        animated: false,\n        data: {\n          type: addEdgeType\n        },\n      }\n    }else{\n      //input/outputだったら\n      if(NumOfEdge < 2){\n        newEdge = {\n          id: getEdgeId(),\n          source: params.source,\n          target: params.target,\n          type: 'straight',\n          style: { stroke: 'black' },\n          markerEnd: MarkerType.ArrowClosed,\n          animated: false,\n        }\n      }else{\n        //メイクノードではエッジを1本しか生やせない\n        alert(\"1つのメイク開始/終了ノードから出せる矢印は1本だけです.追加で分岐させたい場合は分岐ノードを繋げてください\")\n        return\n      }\n    }\n  }else{\n    //新しく足すエッジが3本目だったら追加させない\n    alert(\"1つのノードから出せる矢印は2本までです.追加で分岐させたい場合は分岐ノードを繋げてください\")\n    return\n  }\n  addEdges([newEdge])\n  console.log(newEdge)\n})\n\n/* マウス操作に結びつけた関数 */\n//ノードのドラッグ操作\nconst onDragOver = (event) => {\n  event.preventDefault()\n  if (event.dataTransfer) {\n    event.dataTransfer.dropEffect = 'move'\n  }\n}\n//ノードのドロップによる，新規ノードの追加\nlet id = 0\nconst ss_getId = () => `ss_${id++}`\nconst m_getId = () => `make_${id++}`\nconst mv_getId = () => `mvbranch_${id++}`\nconst s_getId = () => `sbranch_${id++}`\nconst t_getId = () => `tbranch_${id++}`\nconst onDrop = (event) => {\n  const type = event.dataTransfer?.getData('application/vueflow')\n  const position = project({ x: event.clientX - 400, y: event.clientY - 150 })\n  var newNode\n  if(type == 'input' || type == 'output'){\n    //開始ノードか終了ノード\n    newNode = {\n      id: ss_getId(), type, position,\n      label: type == 'input' ? `メイク開始` : `メイク終了`,\n    }\n  }else if(type == 'customMake'){\n    //メイクノード\n    newNode = {\n      id: m_getId(),\n      type, position,\n      label: store.state.itemName.length >= 7\n        ? store.state.itemName+\"\\n(\"+store.state.typeName+\")\"\n        : store.state.itemName+\"(\"+store.state.typeName+\")\",\n      style: { '--vf-node-color': 'black' },\n      data: {\n        partName: store.state.partName,\n        partNum: store.state.partNum,\n        itemName: store.state.itemName,\n        itemNum: store.state.itemNum,\n        typeName: store.state.typeName,\n        typeNum: store.state.typeNum,\n        skip: false,\n        forget: false,\n      }\n    }\n  }else{\n    //分岐ノード\n    var nodeLabel\n    var nodeId\n    if(type == 'customMotivation'){\n      nodeLabel = \"気合い\"\n      nodeId = mv_getId()\n    }else if(type == 'customSeason'){\n      nodeLabel = \"季節\"\n      nodeId = s_getId()\n    }else{\n      nodeLabel = \"外出時間\"\n      nodeId = t_getId()\n    }\n    newNode = {\n      id: nodeId,\n      type, position,\n      label: nodeLabel,\n      style: { '--vf-node-color': 'black' },\n    }\n  }\n  addNodes([newNode])\n}\n\n/* vueFlow上のボタン操作 */\n//現在のviewpaneの変換 (ズームとパン) をリセット\nconst resetTrans = () => {\n  setTransform({ x: 0, y: 0, zoom: 1 })\n}\n//toObjectは、現在のグラフデータを簡単に永続化できるオブジェクトに変換\nconst logToObject = () => {\n  console.log(JSON.stringify(toObject()))\n  const params = new URLSearchParams()\n  params.append('userName', 'takano')\n  params.append('flowchart', JSON.stringify(toObject()))\n  axios.post('https://takano.nkmr.io/flowchart_post.php', params)\n  .then((response)=>{\n    //上手く行った時\n    console.log('status:',response.status)\n  }).catch((error)=>{\n    //失敗した時\n    console.log('err:',error)\n  })\n}\n</script>\n\n<template>\n  <TopMenu @submitObject=\"logToObject\" /> <!-- @checkTurn1=\"checkOutput\" -->\n  <div class=\"dndflow\" @drop=\"onDrop\">\n    <div class=\"sidemenu\">\n      <FaceImage />\n      <NodeSettings />\n      <NodeField />\n    </div>\n    <VueFlow\n      class=\"basicflow\" v-model=\"elements\"\n      :node-types=\"nodeTypes\" :default-zoom=\"1.5\" :min-zoom=\"0.2\" :max-zoom=\"4\"\n      :fit-view-on-init=\"true\" :snap-to-grid=\"true\" :connection-mode=\"ConnectionMode.Loose\"\n      @dragover=\"onDragOver\" @pane-ready=\"onLoad\" @selection-context-menu=\"selectMenu\"\n      @contextmenu.prevent.stop=\"handleClick($event)\"\n    >\n      <Background pattern-color=\"#000000\" gap=\"8\" />\n      <MiniMap />\n      <Controls />\n      <div class=\"controls\">\n        <button style=\"background-color: #191970; color: white;\" @click=\"resetTrans\">reset transform</button>\n        <button @click=\"logToObject\">log toObject</button>\n      </div>\n      <!--カスタムノードの設定-->\n      <template #node-Make=\"props\">\n        <MakeNode v-bind=\"props\" />\n      </template>\n      <template #node-Motivation=\"props\">\n        <MotivationNode v-bind=\"props\" />\n      </template>\n      <template #node-Season=\"props\">\n        <SeasonNode v-bind=\"props\" />\n      </template>\n      <template #node-Time=\"props\">\n        <TimeNode v-bind=\"props\" />\n      </template>\n      <!--context-menuの設定-->\n      <vue-simple-context-menu\n        element-id=\"myUniqueId\"\n        :options=\"options\"\n        ref=\"vueContextMenu\"\n        @option-clicked=\"optionClicked\"\n      />\n    </VueFlow>\n  </div>\n</template>\n\n<style>\n@import '../css/flowchart.css';\n</style>"]}]}